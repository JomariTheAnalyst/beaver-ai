// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  projects      Project[]
  conversations Conversation[]
  
  @@map("users")
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  conversations Conversation[]
  sandboxes     Sandbox[]
  files         ProjectFile[]
  
  @@map("projects")
}

model Conversation {
  id        String    @id @default(uuid())
  title     String?
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("conversations")
}

model Message {
  id        String      @id @default(uuid())
  content   String
  role      MessageRole
  agentType String?
  metadata  Json?
  createdAt DateTime    @default(now())
  
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model Sandbox {
  id         String        @id @default(uuid())
  e2bId      String        @unique
  status     SandboxStatus @default(CREATING)
  previewUrl String?
  metadata   Json?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  files SandboxFile[]
  logs  SandboxLog[]
  
  @@map("sandboxes")
}

model ProjectFile {
  id        String   @id @default(uuid())
  path      String
  content   String?
  size      Int?
  mimeType  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, path])
  @@map("project_files")
}

model SandboxFile {
  id        String   @id @default(uuid())
  path      String
  content   String?
  size      Int?
  mimeType  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  sandboxId String
  sandbox   Sandbox @relation(fields: [sandboxId], references: [id], onDelete: Cascade)
  
  @@unique([sandboxId, path])
  @@map("sandbox_files")
}

model SandboxLog {
  id        String     @id @default(uuid())
  type      LogType
  message   String
  level     LogLevel   @default(INFO)
  metadata  Json?
  createdAt DateTime   @default(now())
  
  sandboxId String
  sandbox   Sandbox @relation(fields: [sandboxId], references: [id], onDelete: Cascade)
  
  @@map("sandbox_logs")
}

model AgentActivity {
  id        String           @id @default(uuid())
  agentType String
  action    String
  status    ActivityStatus
  input     Json?
  output    Json?
  error     String?
  duration  Int?            // in milliseconds
  createdAt DateTime        @default(now())
  
  projectId String?
  
  @@map("agent_activities")
}

enum ProjectStatus {
  PLANNING
  DEVELOPMENT
  TESTING
  COMPLETED
  DEPLOYED
  ERROR
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum SandboxStatus {
  CREATING
  ACTIVE
  STOPPED
  ERROR
}

enum LogType {
  COMMAND
  OUTPUT
  ERROR
  SYSTEM
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum ActivityStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}